#pragma hdrstop
#pragma argsused

#ifdef _WIN32
#include <tchar.h>
#else
  typedef char _TCHAR;
  #define _tmain main
#endif

#include <stdio.h>
#include <fstream>
#include <iostream>
#include <string.h>
#include <cstring>
#include <conio.h>
#include <math.h>
using namespace std;
  /*	Определить функцию, позволяющую определить лежат ли
	какие-либо две точки по одну сторону от прямой.
	Даны координаты вершин двух треугольников.
	Определить, лежит ли одни из них внутри другого. */

class Point {
  public:
	double x,y;
	Point(double _x, double _y){x=_x;y=_y;} // конструктор класса
	double getX(){return x;}
	double getY(){return y;}
};

class Line {
  public:
	double k,b; // коэффициенты прямой
	Line(Point *p1,Point *p2) {
	  k = (p2->getY() - p1->getY()) / (p2->getX() - p1->getX());
	  b = (p1->getY() - ( (p2->getY() - p1->getY())*p1->getX() /
		 (p2->getX() - p1->getX()) ) );
	};

	double contains(Point *p){
	   return p->getY() - k*p->getX()+b;
	};

};

class Triangle {
  public:
	double a,b,c; // коэффициенты прямой
	Triangle(Point *p1,Point *p2,Point *p3) {

	};
  bool contains_in_triangle(Point *p1, Point *p2, Point *p3, Point *pTest ){
  double a = (p1->getX() - pTest->getX()) * (p2->getY() - p1->getY()) - (p2->getX() - p1->getX()) * (p1->getY() - pTest->getY());
  double b = (p2->getX() - TPest->getX()) * (p3->getY() - p2->getY()) - (p3->getX() - p2->getX()) * (p2->getY() - pTest->getY());
  double c = (p3->getX() - pTest->getX()) * (p1->getY() - p3->getY()) - (p1->getX() - p3->getX()) * (p3->getY() - pTest->getY());

  if ((a >= 0 && b >= 0 && c >= 0) || (a <= 0 && b <= 0 && c <= 0))
	return TRUE;
  else
	return FALSE;
}
};

	double contains(Point *p){
	   return p->getY() - k*p->getX()+b;
	};


int _tmain(int argc, _TCHAR* argv[]){

  Point *p1 = new Point(1,1);
  Point *p2 = new Point(2,2);
  Line *l = new Line(p1,p2);

  Point *p3 = new Point(3,0);
  cout<<l->contains(p3);
  Point *p4 = new Point(0,3);
  cout<<l->contains(p4);
  Point *p5 = new Point(3,7);
  cout<<l->contains(p5);
  Point *p6 = new Point(4,5);
  cout<<l->contains(p6);
  if (l->contains(p5)*l->contains(p6) > 0) {
	  cout<<"Yes!"<<endl; }
	  else { cout<<"No!"<<endl;
  }

//  ifstream in ("input.txt");
//  if (!in){
//	throw runtime_error("Can't open file");
//  }
//  ofstream out("output.txt");
//  string line;
//  while(getline(in, line)){
//   out<<process_line(line)<<std::endl;
//  }
//  in.close();
//  out.close();
//  cout<<"File is written!"<<endl;
  system("pause");
  return 0;
}

